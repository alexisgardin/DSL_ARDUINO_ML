// automatically generated by Xtext
grammar fr.unice.polytech.dsl.arduinoml.AML with org.eclipse.xtext.common.Terminals

import "http://fr.unice.polytech.dsl/arduinoml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
	'App'
	name=EString
	'sensors' ':'
		('binary' ':'
	 		bricks+=BinarySensor
	    	(bricks+=BinarySensor)*)?
	    ('analog' ':'
	 		bricks+=AnalogSensor
	    	(bricks+=AnalogSensor)*)?
	'actuators' ':'
		('binary' ':'
	 		bricks+=BinaryActuator
	    	(bricks+=BinaryActuator)*)?
	    ('analog' ':'
	 		bricks+=AnalogActuator
	    	(bricks+=AnalogActuator)*)?
	'states' ':' 
		states+=State 
		(states+=State)*
	'initial' initial=[State|EString]
;

State returns State:
	name=EString ':'
		actions+=(BinaryAction|AnalogAction)
		(actions+=(BinaryAction|AnalogAction))*
		transition=Transition
;

BinaryAction returns BinaryAction:
	{BinaryAction}
	(actuator=[Actuator|EString] '->' actionValue=SIGNAL);

AnalogAction returns AnalogAction:
	{AnalogAction}
	(actuator=[Actuator|EString] '->' actionValue=EInt);


enum SIGNAL returns SIGNAL:
				HIGH = 'HIGH' | LOW = 'LOW';
				
enum OPERATOR returns OPERATOR:
				and = 'and' | or = 'or'
;

enum COMPARATOR returns COMPARATOR:
				EQUAL = '=' | INFERIOR = '<' | SUPERIOR = '>'
;
				
Transition returns Transition:
	{Transition}
	'if' condition=MultipleElementCondition '->' next=[State|EString];


MultipleElementCondition returns MultipleElementCondition:
	{MultipleElementCondition}
	conditions+=(SingleElementCondition | ValueElementCondition) (operators+=OPERATOR conditions+=(SingleElementCondition | ValueElementCondition))*;

SingleElementCondition returns SingleElementCondition:
	{SingleElementCondition}
	sensor=[BinarySensor | EString] 'is' value=SIGNAL;

ValueElementCondition returns ValueElementCondition:
	{ValueElementCondition}
	sensor=[AnalogSensor | EString] comparator=COMPARATOR value=EFloat;

	
BinarySensor returns BinarySensor:
	{BinarySensor}
	name=EString '->' pin=EString;
	
AnalogSensor returns AnalogSensor:
	{AnalogSensor}
	name=EString '->' pin=EString;


AnalogActuator returns AnalogActuator:
	{AnalogActuator}
	name=EString '->' pin=EString;

BinaryActuator returns BinaryActuator:
	{BinaryActuator}
	name=EString '->' pin=EString;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
	
EFloat returns ecore::EFloat:
	INT('.'INT+)?;
