/*
 * generated by Xtext 2.14.0
 */
grammar InternalAML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.unice.polytech.dsl.arduinoml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.unice.polytech.dsl.arduinoml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.unice.polytech.dsl.arduinoml.services.AMLGrammarAccess;

}

@parser::members {

 	private AMLGrammarAccess grammarAccess;

    public InternalAMLParser(TokenStream input, AMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "App";
   	}

   	@Override
   	protected AMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleApp
entryRuleApp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppRule()); }
	iv_ruleApp=ruleApp
	{ $current=$iv_ruleApp.current; }
	EOF;

// Rule App
ruleApp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='App'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppAccess().getAppKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='sensors'
		{
			newLeafNode(otherlv_2, grammarAccess.getAppAccess().getSensorsKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAppAccess().getColonKeyword_3());
		}
		(
			otherlv_4='binary'
			{
				newLeafNode(otherlv_4, grammarAccess.getAppAccess().getBinaryKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getAppAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksBinarySensorParserRuleCall_4_2_0());
					}
					lv_bricks_6_0=ruleBinarySensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_6_0,
							"fr.unice.polytech.dsl.arduinoml.AML.BinarySensor");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksBinarySensorParserRuleCall_4_3_0());
					}
					lv_bricks_7_0=ruleBinarySensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_7_0,
							"fr.unice.polytech.dsl.arduinoml.AML.BinarySensor");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_8='analog'
			{
				newLeafNode(otherlv_8, grammarAccess.getAppAccess().getAnalogKeyword_5_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getAppAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksAnalogSensorParserRuleCall_5_2_0());
					}
					lv_bricks_10_0=ruleAnalogSensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_10_0,
							"fr.unice.polytech.dsl.arduinoml.AML.AnalogSensor");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksAnalogSensorParserRuleCall_5_3_0());
					}
					lv_bricks_11_0=ruleAnalogSensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_11_0,
							"fr.unice.polytech.dsl.arduinoml.AML.AnalogSensor");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_12='actuators'
		{
			newLeafNode(otherlv_12, grammarAccess.getAppAccess().getActuatorsKeyword_6());
		}
		otherlv_13=':'
		{
			newLeafNode(otherlv_13, grammarAccess.getAppAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getBricksActuatorParserRuleCall_8_0());
				}
				lv_bricks_14_0=ruleActuator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					add(
						$current,
						"bricks",
						lv_bricks_14_0,
						"fr.unice.polytech.dsl.arduinoml.AML.Actuator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getBricksActuatorParserRuleCall_9_0());
				}
				lv_bricks_15_0=ruleActuator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					add(
						$current,
						"bricks",
						lv_bricks_15_0,
						"fr.unice.polytech.dsl.arduinoml.AML.Actuator");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_16='states'
		{
			newLeafNode(otherlv_16, grammarAccess.getAppAccess().getStatesKeyword_10());
		}
		otherlv_17=':'
		{
			newLeafNode(otherlv_17, grammarAccess.getAppAccess().getColonKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getStatesStateParserRuleCall_12_0());
				}
				lv_states_18_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					add(
						$current,
						"states",
						lv_states_18_0,
						"fr.unice.polytech.dsl.arduinoml.AML.State");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAppAccess().getStatesStateParserRuleCall_13_0());
				}
				lv_states_19_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppRule());
					}
					add(
						$current,
						"states",
						lv_states_19_0,
						"fr.unice.polytech.dsl.arduinoml.AML.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_20='initial'
		{
			newLeafNode(otherlv_20, grammarAccess.getAppAccess().getInitialKeyword_14());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAppAccess().getInitialStateCrossReference_15_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getStateAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0());
				}
				lv_actions_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"actions",
						lv_actions_2_0,
						"fr.unice.polytech.dsl.arduinoml.AML.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0());
				}
				lv_actions_3_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"actions",
						lv_actions_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTransitionTransitionParserRuleCall_4_0());
				}
				lv_transition_4_0=ruleTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"transition",
						lv_transition_4_0,
						"fr.unice.polytech.dsl.arduinoml.AML.Transition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionAccess().getActionAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_1_0_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='->'
			{
				newLeafNode(otherlv_2, grammarAccess.getActionAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getValueSIGNALEnumRuleCall_1_2_0());
					}
					lv_value_3_0=ruleSIGNAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"fr.unice.polytech.dsl.arduinoml.AML.SIGNAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransitionAccess().getTransitionAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getConditionMultipleElementConditionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleMultipleElementCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"fr.unice.polytech.dsl.arduinoml.AML.MultipleElementCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getNextStateCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultipleElementCondition
entryRuleMultipleElementCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleElementConditionRule()); }
	iv_ruleMultipleElementCondition=ruleMultipleElementCondition
	{ $current=$iv_ruleMultipleElementCondition.current; }
	EOF;

// Rule MultipleElementCondition
ruleMultipleElementCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMultipleElementConditionAccess().getMultipleElementConditionAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMultipleElementConditionAccess().getConditionsSingleElementConditionParserRuleCall_1_0_0());
					}
					lv_conditions_1_1=ruleSingleElementCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultipleElementConditionRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_1_1,
							"fr.unice.polytech.dsl.arduinoml.AML.SingleElementCondition");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMultipleElementConditionAccess().getConditionsValueElementConditionParserRuleCall_1_0_1());
					}
					lv_conditions_1_2=ruleValueElementCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultipleElementConditionRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_1_2,
							"fr.unice.polytech.dsl.arduinoml.AML.ValueElementCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMultipleElementConditionAccess().getOperatorsOPERATOREnumRuleCall_2_0_0());
					}
					lv_operators_2_0=ruleOPERATOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultipleElementConditionRule());
						}
						add(
							$current,
							"operators",
							lv_operators_2_0,
							"fr.unice.polytech.dsl.arduinoml.AML.OPERATOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getMultipleElementConditionAccess().getConditionsSingleElementConditionParserRuleCall_2_1_0_0());
						}
						lv_conditions_3_1=ruleSingleElementCondition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleElementConditionRule());
							}
							add(
								$current,
								"conditions",
								lv_conditions_3_1,
								"fr.unice.polytech.dsl.arduinoml.AML.SingleElementCondition");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getMultipleElementConditionAccess().getConditionsValueElementConditionParserRuleCall_2_1_0_1());
						}
						lv_conditions_3_2=ruleValueElementCondition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultipleElementConditionRule());
							}
							add(
								$current,
								"conditions",
								lv_conditions_3_2,
								"fr.unice.polytech.dsl.arduinoml.AML.ValueElementCondition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleSingleElementCondition
entryRuleSingleElementCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleElementConditionRule()); }
	iv_ruleSingleElementCondition=ruleSingleElementCondition
	{ $current=$iv_ruleSingleElementCondition.current; }
	EOF;

// Rule SingleElementCondition
ruleSingleElementCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingleElementConditionAccess().getSingleElementConditionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleElementConditionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSingleElementConditionAccess().getSensorBinarySensorCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getSingleElementConditionAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleElementConditionAccess().getValueSIGNALEnumRuleCall_3_0());
				}
				lv_value_3_0=ruleSIGNAL
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleElementConditionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.SIGNAL");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueElementCondition
entryRuleValueElementCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueElementConditionRule()); }
	iv_ruleValueElementCondition=ruleValueElementCondition
	{ $current=$iv_ruleValueElementCondition.current; }
	EOF;

// Rule ValueElementCondition
ruleValueElementCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueElementConditionAccess().getValueElementConditionAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueElementConditionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getValueElementConditionAccess().getSensorAnalogSensorCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValueElementConditionAccess().getComparatorCOMPARATOREnumRuleCall_2_0());
				}
				lv_comparator_2_0=ruleCOMPARATOR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueElementConditionRule());
					}
					set(
						$current,
						"comparator",
						lv_comparator_2_0,
						"fr.unice.polytech.dsl.arduinoml.AML.COMPARATOR");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValueElementConditionAccess().getValueEFloatParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueElementConditionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EFloat");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinarySensor
entryRuleBinarySensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinarySensorRule()); }
	iv_ruleBinarySensor=ruleBinarySensor
	{ $current=$iv_ruleBinarySensor.current; }
	EOF;

// Rule BinarySensor
ruleBinarySensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBinarySensorAccess().getBinarySensorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinarySensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinarySensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getBinarySensorAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinarySensorAccess().getPinEIntParserRuleCall_3_0());
				}
				lv_pin_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinarySensorRule());
					}
					set(
						$current,
						"pin",
						lv_pin_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnalogSensor
entryRuleAnalogSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalogSensorRule()); }
	iv_ruleAnalogSensor=ruleAnalogSensor
	{ $current=$iv_ruleAnalogSensor.current; }
	EOF;

// Rule AnalogSensor
ruleAnalogSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnalogSensorAccess().getAnalogSensorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnalogSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnalogSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getAnalogSensorAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnalogSensorAccess().getPinEIntParserRuleCall_3_0());
				}
				lv_pin_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnalogSensorRule());
					}
					set(
						$current,
						"pin",
						lv_pin_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActuator
entryRuleActuator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorRule()); }
	iv_ruleActuator=ruleActuator
	{ $current=$iv_ruleActuator.current; }
	EOF;

// Rule Actuator
ruleActuator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActuatorAccess().getActuatorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getActuatorAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActuatorAccess().getPinEIntParserRuleCall_3_0());
				}
				lv_pin_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActuatorRule());
					}
					set(
						$current,
						"pin",
						lv_pin_3_0,
						"fr.unice.polytech.dsl.arduinoml.AML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_1_0());
			}
			(
				this_INT_2=RULE_INT
				{
					$current.merge(this_INT_2);
				}
				{
					newLeafNode(this_INT_2, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1_1());
				}
			)+
		)?
	)
;

// Rule SIGNAL
ruleSIGNAL returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='HIGH'
			{
				$current = grammarAccess.getSIGNALAccess().getHIGHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSIGNALAccess().getHIGHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LOW'
			{
				$current = grammarAccess.getSIGNALAccess().getLOWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSIGNALAccess().getLOWEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule OPERATOR
ruleOPERATOR returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getOPERATORAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOPERATORAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getOPERATORAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOPERATORAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule COMPARATOR
ruleCOMPARATOR returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getCOMPARATORAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCOMPARATORAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getCOMPARATORAccess().getINFERIOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCOMPARATORAccess().getINFERIOREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getCOMPARATORAccess().getSUPERIOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCOMPARATORAccess().getSUPERIOREnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
