/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.arduinoml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSensorsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBricksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBricksSensorParserRuleCall_4_0 = (RuleCall)cBricksAssignment_4.eContents().get(0);
		private final Assignment cBricksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBricksSensorParserRuleCall_5_0 = (RuleCall)cBricksAssignment_5.eContents().get(0);
		private final Keyword cActuatorsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBricksAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBricksActuatorParserRuleCall_8_0 = (RuleCall)cBricksAssignment_8.eContents().get(0);
		private final Assignment cBricksAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBricksActuatorParserRuleCall_9_0 = (RuleCall)cBricksAssignment_9.eContents().get(0);
		private final Keyword cStatesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cStatesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cStatesStateParserRuleCall_12_0 = (RuleCall)cStatesAssignment_12.eContents().get(0);
		private final Assignment cStatesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStatesStateParserRuleCall_13_0 = (RuleCall)cStatesAssignment_13.eContents().get(0);
		private final Keyword cInitialKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cInitialAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cInitialStateCrossReference_15_0 = (CrossReference)cInitialAssignment_15.eContents().get(0);
		private final RuleCall cInitialStateEStringParserRuleCall_15_0_1 = (RuleCall)cInitialStateCrossReference_15_0.eContents().get(1);
		
		//App:
		//	'App'
		//	name=EString
		//	'sensors' ':'
		//	bricks+=Sensor
		//	bricks+=Sensor*
		//	'actuators' ':'
		//	bricks+=Actuator
		//	bricks+=Actuator*
		//	'states' ':'
		//	states+=State
		//	states+=State*
		//	'initial' initial=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'App' name=EString 'sensors' ':' bricks+=Sensor bricks+=Sensor* 'actuators' ':' bricks+=Actuator bricks+=Actuator*
		//'states' ':' states+=State states+=State* 'initial' initial=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//'App'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'sensors'
		public Keyword getSensorsKeyword_2() { return cSensorsKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//bricks+=Sensor
		public Assignment getBricksAssignment_4() { return cBricksAssignment_4; }
		
		//Sensor
		public RuleCall getBricksSensorParserRuleCall_4_0() { return cBricksSensorParserRuleCall_4_0; }
		
		//bricks+=Sensor*
		public Assignment getBricksAssignment_5() { return cBricksAssignment_5; }
		
		//Sensor
		public RuleCall getBricksSensorParserRuleCall_5_0() { return cBricksSensorParserRuleCall_5_0; }
		
		//'actuators'
		public Keyword getActuatorsKeyword_6() { return cActuatorsKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//bricks+=Actuator
		public Assignment getBricksAssignment_8() { return cBricksAssignment_8; }
		
		//Actuator
		public RuleCall getBricksActuatorParserRuleCall_8_0() { return cBricksActuatorParserRuleCall_8_0; }
		
		//bricks+=Actuator*
		public Assignment getBricksAssignment_9() { return cBricksAssignment_9; }
		
		//Actuator
		public RuleCall getBricksActuatorParserRuleCall_9_0() { return cBricksActuatorParserRuleCall_9_0; }
		
		//'states'
		public Keyword getStatesKeyword_10() { return cStatesKeyword_10; }
		
		//':'
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }
		
		//states+=State
		public Assignment getStatesAssignment_12() { return cStatesAssignment_12; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_12_0() { return cStatesStateParserRuleCall_12_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_13() { return cStatesAssignment_13; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_13_0() { return cStatesStateParserRuleCall_13_0; }
		
		//'initial'
		public Keyword getInitialKeyword_14() { return cInitialKeyword_14; }
		
		//initial=[State|EString]
		public Assignment getInitialAssignment_15() { return cInitialAssignment_15; }
		
		//[State|EString]
		public CrossReference getInitialStateCrossReference_15_0() { return cInitialStateCrossReference_15_0; }
		
		//EString
		public RuleCall getInitialStateEStringParserRuleCall_15_0_1() { return cInitialStateEStringParserRuleCall_15_0_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cTransitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionTransitionParserRuleCall_4_0 = (RuleCall)cTransitionAssignment_4.eContents().get(0);
		
		//State:
		//	name=EString ':'
		//	actions+=Action
		//	actions+=Action*
		//	transition=Transition;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' actions+=Action actions+=Action* transition=Transition
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//transition=Transition
		public Assignment getTransitionAssignment_4() { return cTransitionAssignment_4; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_4_0() { return cTransitionTransitionParserRuleCall_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cActuatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cActuatorActuatorCrossReference_1_0_0 = (CrossReference)cActuatorAssignment_1_0.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_1_0_0_1 = (RuleCall)cActuatorActuatorCrossReference_1_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueSIGNALEnumRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//Action:
		//	{Action} (actuator=[Actuator|EString] '->' value=SIGNAL);
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} (actuator=[Actuator|EString] '->' value=SIGNAL)
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//actuator=[Actuator|EString] '->' value=SIGNAL
		public Group getGroup_1() { return cGroup_1; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_1_0() { return cActuatorAssignment_1_0; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_1_0_0() { return cActuatorActuatorCrossReference_1_0_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_1_0_0_1() { return cActuatorActuatorEStringParserRuleCall_1_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_1_2_0() { return cValueSIGNALEnumRuleCall_1_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSensorSensorCrossReference_1_0 = (CrossReference)cSensorAssignment_1.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_1_0_1 = (RuleCall)cSensorSensorCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSIGNALEnumRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNextStateCrossReference_5_0 = (CrossReference)cNextAssignment_5.eContents().get(0);
		private final RuleCall cNextStateEStringParserRuleCall_5_0_1 = (RuleCall)cNextStateCrossReference_5_0.eContents().get(1);
		
		//Transition:
		//	'if' sensor=[Sensor|EString] 'is' value=SIGNAL '->' next=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'if' sensor=[Sensor|EString] 'is' value=SIGNAL '->' next=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_1_0() { return cSensorSensorCrossReference_1_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_1_0_1() { return cSensorSensorEStringParserRuleCall_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_3_0() { return cValueSIGNALEnumRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//next=[State|EString]
		public Assignment getNextAssignment_5() { return cNextAssignment_5; }
		
		//[State|EString]
		public CrossReference getNextStateCrossReference_5_0() { return cNextStateCrossReference_5_0; }
		
		//EString
		public RuleCall getNextStateEStringParserRuleCall_5_0_1() { return cNextStateEStringParserRuleCall_5_0_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinEIntParserRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		
		//Sensor:
		//	{Sensor} name=EString '->' pin=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor} name=EString '->' pin=EInt
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//pin=EInt
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_3_0() { return cPinEIntParserRuleCall_3_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinEIntParserRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		
		//Actuator:
		//	{Actuator} name=EString '->' pin=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator} name=EString '->' pin=EInt
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//pin=EInt
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_3_0() { return cPinEIntParserRuleCall_3_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class SIGNALElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dsl.arduinoml.AML.SIGNAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWLOWKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SIGNAL:
		//	HIGH | LOW;
		public EnumRule getRule() { return rule; }
		
		//HIGH | LOW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'HIGH'
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//'LOW'
		public Keyword getLOWLOWKeyword_1_0() { return cLOWLOWKeyword_1_0; }
	}
	
	private final AppElements pApp;
	private final StateElements pState;
	private final ActionElements pAction;
	private final SIGNALElements eSIGNAL;
	private final TransitionElements pTransition;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.eSIGNAL = new SIGNALElements();
		this.pTransition = new TransitionElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.dsl.arduinoml.AML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//App:
	//	'App'
	//	name=EString
	//	'sensors' ':'
	//	bricks+=Sensor
	//	bricks+=Sensor*
	//	'actuators' ':'
	//	bricks+=Actuator
	//	bricks+=Actuator*
	//	'states' ':'
	//	states+=State
	//	states+=State*
	//	'initial' initial=[State|EString];
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//State:
	//	name=EString ':'
	//	actions+=Action
	//	actions+=Action*
	//	transition=Transition;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Action:
	//	{Action} (actuator=[Actuator|EString] '->' value=SIGNAL);
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum SIGNAL:
	//	HIGH | LOW;
	public SIGNALElements getSIGNALAccess() {
		return eSIGNAL;
	}
	
	public EnumRule getSIGNALRule() {
		return getSIGNALAccess().getRule();
	}
	
	//Transition:
	//	'if' sensor=[Sensor|EString] 'is' value=SIGNAL '->' next=[State|EString];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Sensor:
	//	{Sensor} name=EString '->' pin=EInt;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator:
	//	{Actuator} name=EString '->' pin=EInt;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
