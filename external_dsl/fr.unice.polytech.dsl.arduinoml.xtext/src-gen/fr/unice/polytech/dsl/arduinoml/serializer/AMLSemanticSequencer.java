/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.arduinoml.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.dsl.arduinoml.Actuator;
import fr.unice.polytech.dsl.arduinoml.App;
import fr.unice.polytech.dsl.arduinoml.ArduinomlPackage;
import fr.unice.polytech.dsl.arduinoml.Sensor;
import fr.unice.polytech.dsl.arduinoml.State;
import fr.unice.polytech.dsl.arduinoml.Transition;
import fr.unice.polytech.dsl.arduinoml.services.AMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArduinomlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArduinomlPackage.ACTION:
				sequence_Action(context, (fr.unice.polytech.dsl.arduinoml.Action) semanticObject); 
				return; 
			case ArduinomlPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case ArduinomlPackage.APP:
				sequence_App(context, (App) semanticObject); 
				return; 
			case ArduinomlPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case ArduinomlPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case ArduinomlPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actuator=[Actuator|EString] value=SIGNAL)
	 */
	protected void sequence_Action(ISerializationContext context, fr.unice.polytech.dsl.arduinoml.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.ACTION__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.ACTION__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.ACTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.ACTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_1_0_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.ACTION__ACTUATOR, false));
		feeder.accept(grammarAccess.getActionAccess().getValueSIGNALEnumRuleCall_1_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActuatorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActuatorAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     App returns App
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         bricks+=Sensor 
	 *         bricks+=Sensor* 
	 *         bricks+=Actuator 
	 *         bricks+=Actuator* 
	 *         states+=State 
	 *         states+=State* 
	 *         initial=[State|EString]
	 *     )
	 */
	protected void sequence_App(ISerializationContext context, App semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSensorAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString actions+=Action actions+=Action* transition=Transition)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (sensor=[Sensor|EString] value=SIGNAL next=[State|EString])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.TRANSITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.TRANSITION__VALUE));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.TRANSITION__NEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.TRANSITION__NEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getSensorSensorEStringParserRuleCall_1_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getTransitionAccess().getValueSIGNALEnumRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_5_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.TRANSITION__NEXT, false));
		feeder.finish();
	}
	
	
}
