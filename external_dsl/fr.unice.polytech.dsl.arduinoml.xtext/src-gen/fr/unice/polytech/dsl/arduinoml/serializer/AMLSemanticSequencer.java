/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dsl.arduinoml.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.dsl.arduinoml.Actuator;
import fr.unice.polytech.dsl.arduinoml.AnalogSensor;
import fr.unice.polytech.dsl.arduinoml.App;
import fr.unice.polytech.dsl.arduinoml.ArduinomlPackage;
import fr.unice.polytech.dsl.arduinoml.BinarySensor;
import fr.unice.polytech.dsl.arduinoml.MultipleElementCondition;
import fr.unice.polytech.dsl.arduinoml.SingleElementCondition;
import fr.unice.polytech.dsl.arduinoml.State;
import fr.unice.polytech.dsl.arduinoml.Transition;
import fr.unice.polytech.dsl.arduinoml.ValueElementCondition;
import fr.unice.polytech.dsl.arduinoml.services.AMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArduinomlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArduinomlPackage.ACTION:
				sequence_Action(context, (fr.unice.polytech.dsl.arduinoml.Action) semanticObject); 
				return; 
			case ArduinomlPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case ArduinomlPackage.ANALOG_SENSOR:
				sequence_AnalogSensor(context, (AnalogSensor) semanticObject); 
				return; 
			case ArduinomlPackage.APP:
				sequence_App(context, (App) semanticObject); 
				return; 
			case ArduinomlPackage.BINARY_SENSOR:
				sequence_BinarySensor(context, (BinarySensor) semanticObject); 
				return; 
			case ArduinomlPackage.MULTIPLE_ELEMENT_CONDITION:
				sequence_MultipleElementCondition(context, (MultipleElementCondition) semanticObject); 
				return; 
			case ArduinomlPackage.SINGLE_ELEMENT_CONDITION:
				sequence_SingleElementCondition(context, (SingleElementCondition) semanticObject); 
				return; 
			case ArduinomlPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case ArduinomlPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case ArduinomlPackage.VALUE_ELEMENT_CONDITION:
				sequence_ValueElementCondition(context, (ValueElementCondition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actuator=[Actuator|EString] value=SIGNAL)
	 */
	protected void sequence_Action(ISerializationContext context, fr.unice.polytech.dsl.arduinoml.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.ACTION__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.ACTION__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.ACTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.ACTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_1_0_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.ACTION__ACTUATOR, false));
		feeder.accept(grammarAccess.getActionAccess().getValueSIGNALEnumRuleCall_1_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActuatorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActuatorAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnalogSensor returns AnalogSensor
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_AnalogSensor(ISerializationContext context, AnalogSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnalogSensorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAnalogSensorAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     App returns App
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (bricks+=BinarySensor bricks+=BinarySensor*)? 
	 *         (bricks+=AnalogSensor bricks+=AnalogSensor*)? 
	 *         bricks+=Actuator 
	 *         bricks+=Actuator* 
	 *         states+=State 
	 *         states+=State* 
	 *         initial=[State|EString]
	 *     )
	 */
	protected void sequence_App(ISerializationContext context, App semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BinarySensor returns BinarySensor
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_BinarySensor(ISerializationContext context, BinarySensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinarySensorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBinarySensorAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultipleElementCondition returns MultipleElementCondition
	 *
	 * Constraint:
	 *     (
	 *         (conditions+=SingleElementCondition | conditions+=ValueElementCondition) 
	 *         (operators+=OPERATOR (conditions+=SingleElementCondition | conditions+=ValueElementCondition))*
	 *     )
	 */
	protected void sequence_MultipleElementCondition(ISerializationContext context, MultipleElementCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleElementCondition returns SingleElementCondition
	 *
	 * Constraint:
	 *     (sensor=[BinarySensor|EString] value=SIGNAL)
	 */
	protected void sequence_SingleElementCondition(ISerializationContext context, SingleElementCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.SINGLE_ELEMENT_CONDITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.SINGLE_ELEMENT_CONDITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.SINGLE_ELEMENT_CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.SINGLE_ELEMENT_CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleElementConditionAccess().getSensorBinarySensorEStringParserRuleCall_1_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.SINGLE_ELEMENT_CONDITION__SENSOR, false));
		feeder.accept(grammarAccess.getSingleElementConditionAccess().getValueSIGNALEnumRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString actions+=Action actions+=Action* transition=Transition)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (condition=MultipleElementCondition next=[State|EString])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.TRANSITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.TRANSITION__CONDITION));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.TRANSITION__NEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.TRANSITION__NEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getConditionMultipleElementConditionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_4_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.TRANSITION__NEXT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueElementCondition returns ValueElementCondition
	 *
	 * Constraint:
	 *     (sensor=[AnalogSensor|EString] comparator=COMPARATOR value=EFloat)
	 */
	protected void sequence_ValueElementCondition(ISerializationContext context, ValueElementCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__COMPARATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__COMPARATOR));
			if (transientValues.isValueTransient(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueElementConditionAccess().getSensorAnalogSensorEStringParserRuleCall_1_0_1(), semanticObject.eGet(ArduinomlPackage.Literals.VALUE_ELEMENT_CONDITION__SENSOR, false));
		feeder.accept(grammarAccess.getValueElementConditionAccess().getComparatorCOMPARATOREnumRuleCall_2_0(), semanticObject.getComparator());
		feeder.accept(grammarAccess.getValueElementConditionAccess().getValueEFloatParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
